


// 자바 스크립트에선 실행 중인 함수, 코드 블록, 스크립트 전체는 
// 렉시컬 환경이라는 내부 숨김 연관 객체를 갖는다
// 렉시컬 환경은 두 부분으로 구성된다.
// 1. 환경레코드 - 모든 지역 변수를 프로퍼티로 저장하고 있는 객체
// 2. 외부 렉시컬환경 - 외부 코드와 연관되어있다, 
//    현재 렉시컬 환경의 부모 렉시컬 환경,
//    환경레코드가 외부렉시컬 환경을 참조한다.

// 렉시컬 환경이 하나만 존재하는 경우

let phrase1 = 'hello';
console.log(phrase1);

// 스크립트 전체와 관련된 렉시컬 환경은 전역 레시컬 환경이라고 한다

//phrase : 'hello' 변수가 저장되는 환경 레코드 
// 외부 렉시컬 환경을 참조한다
// 외부 렉시컬 환경 : 전역 레시컬환경 = null


// 내부와 외부 레시컬 환경


// 함수를 호춣에 실행하면 새로운 렉시컬 환경이 만들어진다
// 이 렉시컬 환경엔 함수 호출시 넘겨받은 매개변수와 함수의 지역변수가 저장된다

// 함수가 호출 중인 동안엔 호출 중인 함수를 위한 내부 렉시컬 환경과 
// 내부 렉시컬 환경이 가리키는 외부 렉시컬 환경을 갖는다
// 내부 렉시컬 환경은 외부 렉시컬 환경에 대한 참조를 갖는다.
// 코드에서 변수에 접근할 때, 먼저 내부 렉시컬 환경을 검색 범위로 잡는다
// 내부 렉시컬 환경에서 원하는 변수를 찾지 못하면 검색 범위를 내부 렉시컬 환경이 
// 참조하는 외부 렉시컬 환경으로 확장한다
// 전역 렉시컬 환경에 도달할 때까지 변수를 찾지 모하면 엄격 모드에선 에러가 발생

let phrase2 = 'hello';

function func(name){
  console.log(`${phrase2} , ${name}`);
}

func('kim'); // hello , kim

//렉시컬 환경  : name: 'kim' -> func : function , phrase : 'hello' -> null

// func('kim) 을 호출하면 새로운 렉시컬 환경이 만들어진다
// 함수 func 내부의 console.log 에서 변수 name에 접근할 때, 
// 먼저 내부 렉시컬 환경을 살펴본다.
// 내부 렉시컬 환경에 name을 찾을 수 있다.
// console.log에서 변수 phrase에 접근하려는데, phrase 에 상응하는 
// 프로퍼티가 내부 렉시컬 환경에 없기 때문에 검색 범위가 외부 렉시컬 환경으로 확장된다

// 외부 렉시컬 환경애서 phrase를 찾을 수 있다.


